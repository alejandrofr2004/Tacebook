/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package view;

import controller.ProfileController;
import java.awt.Component;
import java.awt.GridLayout;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.Comment;
import model.Message;
import model.Post;
import model.Profile;
import persistence.ProfileDB;
import persistence.TacebookDB;

/**
 * Encárgase de mostrar as opcións do menú principal
 *
 * @author alejandro.fernandezregueiro
 */
public class GUIProfileView extends javax.swing.JDialog implements ProfileView {

    /**
     * Atributo que fai referencia ao número de publicacións a mostrar
     */
    private int postsShowed = 10;
    /**
     * Atributo que fai referencia a clase ProfileController
     */
    private ProfileController profileControler;
    /**
     * Atributo para formatear as
     */
    private SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy 'ás' HH:mm:ss");

    /**
     * Obtén o número de publicacions mostradas
     *
     * @return postsShowed
     */
    public int getPostsShowed() {
        return postsShowed;
    }

    /**
     * Método set do atributo postsShowed
     *
     * @param postsShowed
     */
    public void setPostsShowed(int postsShowed) {
        this.postsShowed = postsShowed;
    }

    /**
     * Método get do atributo formatter
     *
     * @return formatter
     */
    public SimpleDateFormat getFormatter() {
        return formatter;
    }

    /**
     * Método set do atributo formatter
     *
     * @param formatter
     */
    public void setFormatter(SimpleDateFormat formatter) {
        this.formatter = formatter;
    }

    /**
     * Creates new form GUIProfileView
     *
     * @param parent
     * @param modal
     * @param profileControler
     */
    public GUIProfileView(java.awt.Frame parent, boolean modal, ProfileController profileControler) {
        super(parent, modal);
        this.profileControler = profileControler;
        initComponents();
        JLabelName.setText(profileControler.getSessionProfile().getName());
        JLabelState.setText(profileControler.getSessionProfile().getStatus());
        ImageIcon ii = new ImageIcon("src/img/post-it-150262_640.png");
        ImageIcon ii2 = new ImageIcon("src/img/people-35681_640.png");
        ImageIcon ii3 = new ImageIcon("src/img/chat-1873536_640.png");
        String title = "Biografía";
        String title2 = "Amig@s";
        String title3 = "Mensaxes privadas";
        jTabbedPane.setTabComponentAt(0, titleAndIcon(ii, title));
        jTabbedPane.setTabComponentAt(1, titleAndIcon(ii2, title2));
        jTabbedPane.setTabComponentAt(2, titleAndIcon(ii3, title3));
        jButtonReturnBiography.setVisible(false);
        jButtonSendPrivateMessage2.setVisible(false);
    }

    /**
     * Método que te devuelve un panel con el texto y la imagen que le pases
     * para añadirlo al título de cada componente del jTabbedPane
     *
     * @param image
     * @param title
     * @return
     */
    private Component titleAndIcon(ImageIcon image, String title) {
        JPanel panelTextAndImg = new JPanel();
        JLabel text = new JLabel(title);
        JLabel img = new JLabel(image);
        panelTextAndImg.add(text);
        panelTextAndImg.add(img);
        panelTextAndImg.setOpaque(false);
        return panelTextAndImg;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        JLabelName = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        JLabelState = new javax.swing.JLabel();
        JButtonExitSession = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jTabbedPane = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        JLastPosts = new javax.swing.JLabel();
        buttonPost = new javax.swing.JButton();
        buttonComment = new javax.swing.JButton();
        buttonLike = new javax.swing.JButton();
        buttonShowPosts = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTablePosts = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        JTableComments = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jButtonSendPrivateMessage = new javax.swing.JButton();
        jButtonBiography = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        JTableFriends = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jlistFriendshipRequest = new javax.swing.JList<>();
        JbuttonAcept = new javax.swing.JButton();
        JButtonNewFriendship = new javax.swing.JButton();
        jButtonDecline = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTableMessages = new javax.swing.JTable();
        jButtonDeleteMessage = new javax.swing.JButton();
        jButtonReadMessage = new javax.swing.JButton();
        jButtonReturnBiography = new javax.swing.JButton();
        buttonChangeState = new javax.swing.JButton();
        jButtonSendPrivateMessage2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("tacebook-Perfil de usuario");
        setResizable(false);

        jPanel1.setForeground(new java.awt.Color(204, 204, 204));

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/user-1633249_640.png"))); // NOI18N
        jLabel2.setText("Perfil de usuario:");

        JLabelName.setText("name");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/anatomy-2952567_640.png"))); // NOI18N
        jLabel1.setText("Estado actual:");

        JLabelState.setText("state");

        JButtonExitSession.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/exit-97636_640.png"))); // NOI18N
        JButtonExitSession.setText("Pechar sesión");
        JButtonExitSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JButtonExitSessionActionPerformed(evt);
            }
        });

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/tacebook-logo.jpg"))); // NOI18N

        JLastPosts.setText("10 últimas publicacións");

        buttonPost.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/post-it-150262_640.png"))); // NOI18N
        buttonPost.setText("Nova publicación");
        buttonPost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPostActionPerformed(evt);
            }
        });

        buttonComment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/speech-bubbles-303206_640.png"))); // NOI18N
        buttonComment.setText("Comentar");
        buttonComment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCommentActionPerformed(evt);
            }
        });

        buttonLike.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/facebook-295478_640.png"))); // NOI18N
        buttonLike.setText("Gústame");
        buttonLike.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLikeActionPerformed(evt);
            }
        });

        buttonShowPosts.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icon-1970474_640.png"))); // NOI18N
        buttonShowPosts.setText("Ver anteriores publicacións");
        buttonShowPosts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonShowPostsActionPerformed(evt);
            }
        });

        jTablePosts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Data", "Autor", "Texto", "Me gustas"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTablePosts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTablePostsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTablePosts);
        if (jTablePosts.getColumnModel().getColumnCount() > 0) {
            jTablePosts.getColumnModel().getColumn(0).setResizable(false);
            jTablePosts.getColumnModel().getColumn(1).setResizable(false);
            jTablePosts.getColumnModel().getColumn(2).setResizable(false);
            jTablePosts.getColumnModel().getColumn(3).setResizable(false);
        }

        JTableComments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Texto", "De", "Data"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JTableComments.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JTableCommentsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(JTableComments);
        if (JTableComments.getColumnModel().getColumnCount() > 0) {
            JTableComments.getColumnModel().getColumn(0).setResizable(false);
            JTableComments.getColumnModel().getColumn(1).setResizable(false);
            JTableComments.getColumnModel().getColumn(2).setResizable(false);
        }

        jLabel4.setText("Comentarios:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(JLastPosts))
                            .addComponent(jLabel4)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(57, 57, 57)
                                .addComponent(buttonPost, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37)
                                .addComponent(buttonComment)
                                .addGap(42, 42, 42)
                                .addComponent(buttonLike)
                                .addGap(18, 18, 18)
                                .addComponent(buttonShowPosts, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 48, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(JLastPosts)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonPost, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonComment, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonLike, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonShowPosts, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );

        jTabbedPane.addTab("Biografía", jPanel2);

        jLabel5.setText("Lista de amig@s:");

        jButtonSendPrivateMessage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/letter-2935365_640.png"))); // NOI18N
        jButtonSendPrivateMessage.setText("Enviar mensaxe privada");
        jButtonSendPrivateMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSendPrivateMessageActionPerformed(evt);
            }
        });

        jButtonBiography.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/post-it-150262_640.png"))); // NOI18N
        jButtonBiography.setText("Ver biografía");
        jButtonBiography.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBiographyActionPerformed(evt);
            }
        });

        JTableFriends.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "Estado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(JTableFriends);
        if (JTableFriends.getColumnModel().getColumnCount() > 0) {
            JTableFriends.getColumnModel().getColumn(0).setResizable(false);
            JTableFriends.getColumnModel().getColumn(1).setResizable(false);
        }

        jLabel6.setText("Tes solicitudes de amizade dos seguintes perfís:");

        jScrollPane4.setViewportView(jlistFriendshipRequest);

        JbuttonAcept.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/accept.png"))); // NOI18N
        JbuttonAcept.setText("Aceptar solicitude");
        JbuttonAcept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JbuttonAceptActionPerformed(evt);
            }
        });

        JButtonNewFriendship.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/handshake-152812_640.png"))); // NOI18N
        JButtonNewFriendship.setText("Nova solicitude de amizade");
        JButtonNewFriendship.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JButtonNewFriendshipActionPerformed(evt);
            }
        });

        jButtonDecline.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/reject.png"))); // NOI18N
        jButtonDecline.setText("Rexeitar solicitude");
        jButtonDecline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeclineActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(jLabel5))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(222, 222, 222)
                                .addComponent(jButtonBiography, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(59, 59, 59)
                                .addComponent(jButtonSendPrivateMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel6)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane4))
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(109, 109, 109)
                .addComponent(JbuttonAcept, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(jButtonDecline, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addComponent(JButtonNewFriendship, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(68, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonBiography, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSendPrivateMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JbuttonAcept, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDecline, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JButtonNewFriendship, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24))
        );

        jTabbedPane.addTab("Amig@s", jPanel3);

        jLabel7.setText("Mensaxes privadas");

        jTableMessages.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Lida", "Data", "De", "Texto"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableMessages.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableMessagesMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(jTableMessages);
        if (jTableMessages.getColumnModel().getColumnCount() > 0) {
            jTableMessages.getColumnModel().getColumn(0).setResizable(false);
            jTableMessages.getColumnModel().getColumn(1).setResizable(false);
            jTableMessages.getColumnModel().getColumn(2).setResizable(false);
            jTableMessages.getColumnModel().getColumn(3).setResizable(false);
        }

        jButtonDeleteMessage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/reject.png"))); // NOI18N
        jButtonDeleteMessage.setText("Eliminar mensaxe");
        jButtonDeleteMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteMessageActionPerformed(evt);
            }
        });

        jButtonReadMessage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/email-2935508_640.png"))); // NOI18N
        jButtonReadMessage.setText("Ler mensaxe");
        jButtonReadMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReadMessageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonReadMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(79, 79, 79)
                .addComponent(jButtonDeleteMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(259, 259, 259))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 831, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDeleteMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonReadMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("Mensaxes privadas", jPanel4);

        jButtonReturnBiography.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/undo-97591_640.png"))); // NOI18N
        jButtonReturnBiography.setText("Volver a miña biografía");
        jButtonReturnBiography.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReturnBiographyActionPerformed(evt);
            }
        });

        buttonChangeState.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/anatomy-2952567_640.png"))); // NOI18N
        buttonChangeState.setText("Cambiar de estado");
        buttonChangeState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonChangeStateActionPerformed(evt);
            }
        });

        jButtonSendPrivateMessage2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/letter-2935365_640.png"))); // NOI18N
        jButtonSendPrivateMessage2.setText("Enviar mensaxe privada");
        jButtonSendPrivateMessage2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSendPrivateMessage2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTabbedPane))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(JLabelName)
                        .addGap(73, 73, 73)
                        .addComponent(jLabel3)
                        .addGap(56, 56, 56)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(JLabelState)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(194, 194, 194)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonChangeState, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jButtonReturnBiography, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JButtonExitSession)
                    .addComponent(jButtonSendPrivateMessage2, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(195, 195, 195))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(JLabelState))
                            .addComponent(jLabel3)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JLabelName))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                .addComponent(jTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 567, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonChangeState, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JButtonExitSession, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonSendPrivateMessage2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonReturnBiography, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Botón que llama a crear una nueva publicación
     *
     * @param evt
     */
    private void buttonPostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPostActionPerformed
        writeNewPost();
    }//GEN-LAST:event_buttonPostActionPerformed

    /**
     *
     * @param evt
     */
    private void JButtonExitSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JButtonExitSessionActionPerformed
        dispose();
    }//GEN-LAST:event_JButtonExitSessionActionPerformed

    /**
     * Botón para volver a tu biografía
     *
     * @param evt
     */
    private void jButtonReturnBiographyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReturnBiographyActionPerformed

        Profile profile = profileControler.getSessionProfile();
        showBiography(false, profile);
    }//GEN-LAST:event_jButtonReturnBiographyActionPerformed

    /**
     * Botón para hacer un comentario llamando a su método
     *
     * @param evt
     */
    private void buttonCommentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCommentActionPerformed
        writeNewComment();
    }//GEN-LAST:event_buttonCommentActionPerformed

    /**
     * Botón para añadir un like a una publicación
     *
     * @param evt
     */
    private void buttonLikeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLikeActionPerformed
        Profile profile = profileControler.getShownProfile();
        int selectedPost = jTablePosts.getSelectedRow();
        boolean alreadyLike = false;
        Object[] options = new Object[]{"Aceptar"};
        if (selectedPost < 0) {
            JOptionPane.showOptionDialog(null, "Debes seleccionar unha publicación", "Erro nos datos", 0, 2, null, options, 0);
        } else {
            Post post = profile.getPosts().get(selectedPost);
            for (Profile profile1 : post.getProfileLikes()) {
                if (profile1.getName().equals(profileControler.getSessionProfile().getName())) {
                    alreadyLike = true;
                }
            }
            if (post.getAutor().getName().equals(profileControler.getSessionProfile().getName())) {
                JOptionPane.showOptionDialog(null, "Non podes dar like sobre unha publicación túa.", "Erro nos datos", 0, 2, null, options, 0);
            } else if (alreadyLike) {
                JOptionPane.showOptionDialog(null, "Xa diches like sobre esta publicación.", "Erro nos datos", 0, 2, null, options, 0);
            } else {
                profileControler.newLike(post);
            }
        }

    }//GEN-LAST:event_buttonLikeActionPerformed
    /**
     * Para mostrar las publicaciones que quieras
     *
     * @param evt
     */
    private void buttonShowPostsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonShowPostsActionPerformed
        boolean isValid;
        int postShowed = 0;
        do {
            String changePostShowed = JOptionPane.showInputDialog(null, "Introduce o número de publicacións que queres visualizar");
            try {
                postShowed = Integer.parseInt(changePostShowed);
                isValid = true;
            } catch (NumberFormatException excepcion) {
                isValid = false;
            }
            if (!isValid) {
                Object[] options = new Object[]{"Aceptar"};
                JOptionPane.showOptionDialog(null, "Debes introducir un número", "Erro nos datos", 0, 2, null, options, 0);
            }
        } while (!isValid);
        setPostsShowed(postShowed);
        profileControler.reloadProfile();
        JLastPosts.setText(getPostsShowed() + " últimas publicacións");
    }//GEN-LAST:event_buttonShowPostsActionPerformed
    /**
     * Botón para enviar una nueva solicitud de amistad
     *
     * @param evt
     */
    private void JButtonNewFriendshipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JButtonNewFriendshipActionPerformed

        String profileName = JOptionPane.showInputDialog(null, "Introduce o nome do perfil ao que queres enviar a  solicitude:");
        profileControler.newFriendshipRequest(profileName);
    }//GEN-LAST:event_JButtonNewFriendshipActionPerformed
    /**
     * Botón para aceptar una solicitud de amistad
     *
     * @param evt
     */
    private void JbuttonAceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JbuttonAceptActionPerformed
        int selectedFriendship = jlistFriendshipRequest.getSelectedIndex();
        if (selectedFriendship < 0) {
            Object[] options = new Object[]{"Aceptar"};
            JOptionPane.showOptionDialog(null, "Debes seleccionar unha solicitude de amizade", "Erro nos datos", 0, 2, null, options, 0);
        } else {
            ArrayList<Profile> friendshipRequest = profileControler.getSessionProfile().getFriendshipRequests();
            profileControler.acceptFriendshipRequest(friendshipRequest.get(selectedFriendship));
        }
    }//GEN-LAST:event_JbuttonAceptActionPerformed
    /**
     * Botón para rechazar una solicitud de amistad
     *
     * @param evt
     */
    private void jButtonDeclineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeclineActionPerformed
        int selectedFriendship = jlistFriendshipRequest.getSelectedIndex();
        if (selectedFriendship < 0) {
            Object[] options = new Object[]{"Aceptar"};
            JOptionPane.showOptionDialog(null, "Debes seleccionar unha solicitude de amizade", "Erro nos datos", 0, 2, null, options, 0);
        } else {
            ArrayList<Profile> friendshipRequest = profileControler.getSessionProfile().getFriendshipRequests();
            profileControler.rejectFriendshipRequest(friendshipRequest.get(selectedFriendship));
        }
    }//GEN-LAST:event_jButtonDeclineActionPerformed
    /**
     * Botón para enviar un mensar privado
     *
     * @param evt
     */
    private void jButtonSendPrivateMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSendPrivateMessageActionPerformed
        int selectedFriendship = JTableFriends.getSelectedRow();
        if (selectedFriendship < 0) {
            Object[] options = new Object[]{"Aceptar"};
            JOptionPane.showOptionDialog(null, "Debes seleccionar un amigo", "Erro nos datos", 0, 2, null, options, 0);
        } else {

            ArrayList<Profile> friends = profileControler.getSessionProfile().getFriends();
            String input = JOptionPane.showInputDialog(null, "Introduce o texto da mensaxe", "Novo comentario", JOptionPane.QUESTION_MESSAGE);
            if ((input != null) && (!input.isEmpty())) {
                profileControler.newMessage(friends.get(selectedFriendship), input);
            }
        }
    }//GEN-LAST:event_jButtonSendPrivateMessageActionPerformed
    /**
     * Botón para ver la biografía de alguien
     *
     * @param evt
     */
    private void jButtonBiographyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBiographyActionPerformed

        int selectedRow = JTableFriends.getSelectedRow();
        if (selectedRow < 0) {
            Object[] options = new Object[]{"Aceptar"};
            JOptionPane.showOptionDialog(null, "Debes seleccionar un amigo", "Erro nos datos", 0, 2, null, options, 0);
        } else {
            ArrayList<Profile> friends = profileControler.getSessionProfile().getFriends();
            Profile profile = friends.get(JTableFriends.getSelectedRow());
            showBiography(true, profile);
        }
    }//GEN-LAST:event_jButtonBiographyActionPerformed
    /**
     * Botón para cambia rel estado del perfil
     *
     * @param evt
     */
    private void buttonChangeStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonChangeStateActionPerformed
        String state = JOptionPane.showInputDialog(null, "Introduce un novo estado");
        JLabelState.setText(state);
        profileControler.updateProfileStatus(state);
    }//GEN-LAST:event_buttonChangeStateActionPerformed
    /**
     * Botón para enviar un mensar privado
     *
     * @param evt
     */
    private void jButtonSendPrivateMessage2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSendPrivateMessage2ActionPerformed

        String input = JOptionPane.showInputDialog(null, "Introduce o texto da mensaxe", "Novo comentario", JOptionPane.QUESTION_MESSAGE);
        if ((input != null) && (!input.isEmpty())) {
            profileControler.newMessage(profileControler.getShownProfile(), input);
        }
    }//GEN-LAST:event_jButtonSendPrivateMessage2ActionPerformed

    /**
     * Captura el clic para eliminar,responder ou ler unha mensaxe
     *
     * @param evt
     */
    private void jTableMessagesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableMessagesMouseClicked
        int selectedMessage = jTableMessages.getSelectedRow();
        Profile profile = profileControler.getSessionProfile();
        Message message = profile.getMessages().get(selectedMessage);
        if (evt.getClickCount() == 2) {
            Object[] options = new Object[]{"Volver", "Eliminar", "Responder"};
            GridLayout gridLayout = new GridLayout(4, 2);
            JPanel jPanel = new JPanel(gridLayout);
            JLabel JL_off = new JLabel("De:");
            JLabel JL_autorMessage = new JLabel(message.getSourceProfile() + "");
            JL_autorMessage.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
            JLabel JL_DateText = new JLabel("Data:");
            JLabel JL_Date = new JLabel(formatter.format(message.getDate()));
            JL_Date.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
            JLabel jlInfText = new JLabel("Texto:");
            JLabel text = new JLabel(message.getText());
            text.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
            jPanel.add(JL_off);
            jPanel.add(JL_autorMessage);
            jPanel.add(JL_DateText);
            jPanel.add(JL_Date);
            jPanel.add(jlInfText);
            jPanel.add(text);
            String title = "Ler mensaxe";
            int result = JOptionPane.showOptionDialog(null, jPanel, title,
                    0, JOptionPane.INFORMATION_MESSAGE, null, options, this);
            switch (result) {
                case 0:
                    profileControler.markMessageAsRead(message);
                    break;
                case 1:
                    profileControler.markMessageAsRead(message);
                    profileControler.deleteMessage(message);
                    break;
                case 2:
                    String input = JOptionPane.showInputDialog(null, "Introduce o texto da mensaxe", "Novo comentario", JOptionPane.QUESTION_MESSAGE);
                    if ((input != null) && (!input.isEmpty())) {
                        profileControler.replyMessage(message, input);
                    }

                    break;
            }
        }
    }//GEN-LAST:event_jTableMessagesMouseClicked

    private void JTableCommentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JTableCommentsMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_JTableCommentsMouseClicked

    private void jTablePostsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablePostsMouseClicked
        DefaultTableModel model2 = (DefaultTableModel) JTableComments.getModel();
        model2.setRowCount(0);
        if (evt.getClickCount() == 2) {
            Post post = profileControler.getShownProfile().getPosts().get(jTablePosts.getSelectedRow());
            for (Comment comment : post.getComments()) {
                model2.addRow(new Object[]{comment.getText(), comment.getSourceProfile(), comment.getDate()});
            }
            JTableComments.setModel(model2);
        } else {
            model2.setRowCount(0);
        }
    }//GEN-LAST:event_jTablePostsMouseClicked

    private void jButtonReadMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReadMessageActionPerformed
        int messageSelected = jTableMessages.getSelectedRow();
        Object[] options = new Object[]{"Aceptar"};
        if (messageSelected < 0) {
            JOptionPane.showOptionDialog(null, "Debes seleccionar unha mensaxe", "Erro nos datos", 0, 2, null, options, 0);
        } else {
            Message message = profileControler.getShownProfile().getMessages().get(messageSelected);
            if (message.isRead()) {
                JOptionPane.showOptionDialog(null, "Mensaxe xa lida", "Erro nos datos", 0, 2, null, options, 0);
            } else {
                profileControler.markMessageAsRead(message);
            }
        }
    }//GEN-LAST:event_jButtonReadMessageActionPerformed

    private void jButtonDeleteMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteMessageActionPerformed
        int messageSelected = jTableMessages.getSelectedRow();
        if (messageSelected < 0) {
            Object[] options = new Object[]{"Aceptar"};
            JOptionPane.showOptionDialog(null, "Debes seleccionar unha mensaxe", "Erro nos datos", 0, 2, null, options, 0);
        } else {
            Message message = profileControler.getShownProfile().getMessages().get(messageSelected);
            profileControler.deleteMessage(message);
        }
    }//GEN-LAST:event_jButtonDeleteMessageActionPerformed

    /**
     * Método privado para crear una nueva publicación
     *
     * @param scanner
     * @param profile
     */
    private void writeNewPost() {
        String input = JOptionPane.showInputDialog(null, "Introduce o texto da publicación", "Novo comentario", JOptionPane.QUESTION_MESSAGE);
        if ((input != null) && (!input.isEmpty())) {
            profileControler.newPost(input, profileControler.getShownProfile());
        }
    }

    /**
     * Método privado para crear un novo comentario
     *
     * @param scanner
     * @param profile
     */
    private void writeNewComment() {
        if (jTablePosts.getSelectedRow() < 0) {
            Object[] options = new Object[]{"Aceptar"};
            JOptionPane.showOptionDialog(null, "Debes seleccionar unha publicación", "Erro nos datos", 0, 2, null, options, 0);
        } else {
            Profile profile = profileControler.getShownProfile();
            String input = JOptionPane.showInputDialog(null, "Introduce o comentario", "Novo comentario", JOptionPane.QUESTION_MESSAGE);
            if ((input != null) && (!input.isEmpty())) {
                Post post = profile.getPosts().get(jTablePosts.getSelectedRow());
                profileControler.newComment(post, input);
            }
        }
    }

    /**
     * Menú del perfil del usuario
     *
     * @param profile
     */
    @Override
    public void showProfileMenu(Profile profile) {
        ProfileDB.loadProfile(profile.getName(), profile);
        DefaultTableModel model = (DefaultTableModel) jTablePosts.getModel();
        DefaultTableModel model3 = (DefaultTableModel) JTableFriends.getModel();
        DefaultTableModel model4 = (DefaultTableModel) jTableMessages.getModel();
        DefaultListModel defaultListModel = new DefaultListModel();
        jlistFriendshipRequest.setModel(defaultListModel);
        model.setRowCount(0);
        model3.setRowCount(0);
        model4.setRowCount(0);
        for (int i = 0; i < profile.getPosts().size() && i < getPostsShowed(); i++) {
            Post post = profile.getPosts().get(i);
            int likes = post.getProfileLikes().size();
            model.addRow(new Object[]{formatter.format(post.getDate()), post.getAutor().getName(), post.getText(), likes});
        }
        for (int i = 0; i < profile.getFriends().size(); i++) {
            Profile friendProfile = profile.getFriends().get(i);
            model3.addRow(new Object[]{friendProfile, friendProfile.getStatus()});
        }
        for (int i = 0; i < profile.getFriendshipRequests().size(); i++) {
            Profile profile3 = profile.getFriendshipRequests().get(i);
            defaultListModel.add(i, profile3.getName() + " quere establecer amizade contigo");
        }
        for (int i = 0; i < profile.getMessages().size(); i++) {
            Message message = profile.getMessages().get(i);
            if (!message.isRead()) {
                ImageIcon ii3 = new ImageIcon("src/img/chat-1873536_640.png");
                String title3 = "<html><b>Mensaxes privadas</b></html>";
                jTabbedPane.setTabComponentAt(2, titleAndIcon(ii3, title3));
            } else {
                ImageIcon ii3 = new ImageIcon("src/img/chat-1873536_640.png");
                String title3 = "Mensaxes privadas";
                jTabbedPane.setTabComponentAt(2, titleAndIcon(ii3, title3));
            }
            model4.addRow(new Object[]{message.isRead(), formatter.format(message.getDate()), message.getSourceProfile().getName(), message.getText()});
        }
        jTablePosts.setModel(model);
        setVisible(true);
    }

    /**
     * Mostra a biografía dun amigo ou a túa
     *
     * @param ownProfile
     * @param scanner
     * @param profile
     */
    private void showBiography(boolean ownProfile, Profile profile) {
        boolean isValid;
        if (ownProfile) {
            isValid = false;
            profileControler.setShownProfile(profile);
        } else {
            isValid = true;
            profileControler.openSession(profile);
        }
        jTabbedPane.setEnabledAt(2, isValid);
        jButtonBiography.setVisible(isValid);
        jButtonSendPrivateMessage.setVisible(isValid);
        buttonChangeState.setVisible(isValid);
        jLabel6.setVisible(isValid);
        jlistFriendshipRequest.setVisible(isValid);
        JbuttonAcept.setVisible(isValid);
        jButtonDecline.setVisible(isValid);
        JButtonNewFriendship.setVisible(isValid);
        jButtonReturnBiography.setVisible(!isValid);
        jButtonSendPrivateMessage2.setVisible(!isValid);
    }

    /**
     * Mensaje de que no encuentra el perfil de usuario
     */
    @Override
    public void showProfileNotFoundMessage() {
        Object[] options = new Object[]{"Aceptar"};
        JOptionPane.showOptionDialog(null, "Non se atopou o perfil", "Erro nos datos", 0, 2, null, options, 0);

    }

    /**
     * Mnesaje de que salta cuando intentas hacer like sobre una publicación
     * propia
     */
    @Override
    public void showCannotLikeOwnPostMessage() {
        Object[] options = new Object[]{"Aceptar"};
        JOptionPane.showOptionDialog(null, "Non se pode facer like sobre unha publicación propia", "Erro nos datos", 0, 2, null, options, 0);

    }

    /**
     * Mnesaje de error cuando intentas dar like a una publicación que ya diste
     * like
     */
    @Override
    public void showAlreadyLikedPostMessage() {
        Object[] options = new Object[]{"Aceptar"};
        JOptionPane.showOptionDialog(null, "Non se pode facer like sobre unha publicación que xa se fixo like", "Erro nos datos", 0, 2, null, options, 0);

    }

    /**
     * Mensaje de error al intentar mandar una solicitud a un perfil que ya es
     * tu amigo
     *
     * @param profileName
     */
    @Override
    public void showIsAlreadyFriendMessage(String profileName) {
        Object[] options = new Object[]{"Aceptar"};
        JOptionPane.showOptionDialog(null, "Xa tes amizade con " + profileName, "Erro nos datos", 0, 2, null, options, 0);

    }

    /**
     * Mensaje de error al intentar mandar una solicitud a un perfil al que ya
     * le mandaste solicitud
     *
     * @param profileName
     */
    @Override
    public void showExistsFriendshipRequestMessage(String profileName) {
        Object[] options = new Object[]{"Aceptar"};
        JOptionPane.showOptionDialog(null, profileName + " xa ten unha solicitude contigo", "Erro nos datos", 0, 2, null, options, 0);

    }

    /**
     * Mensaje de error al intentar mandar una solicitud a un perfil que ya
     * tiene una solicitud contigo
     *
     * @param profileName
     */
    @Override
    public void showDuplicateFriendshipRequestMessage(String profileName) {
        Object[] options = new Object[]{"Aceptar"};
        JOptionPane.showOptionDialog(null, "Xa tes unha solicitude con " + profileName, "Erro nos datos", 0, 2, null, options, 0);

    }

    /**
     * Mensaje de error en la conexión
     */
    @Override
    public void showConnectionErrorMessage() {
        Object[] options = new Object[]{"Aceptar"};
        JOptionPane.showOptionDialog(null, "Erro na conexión co almacén de datos!", "Erro nos datos", 0, 2, null, options, 0);

    }

    /**
     * Mensaje de error en la lectura de datos
     */
    @Override
    public void showReadErrorMessage() {
        Object[] options = new Object[]{"Aceptar"};
        JOptionPane.showOptionDialog(null, "Erro na lectura de datos!", "Erro nos datos", 0, 2, null, options, 0);

    }

    /**
     * Mensaje de error en la escritura de datos
     */
    @Override
    public void showWriteErrorMessage() {
        Object[] options = new Object[]{"Aceptar"};
        JOptionPane.showOptionDialog(null, "Erro na escritura dos datos!", "Erro nos datos", 0, 2, null, options, 0);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JButtonExitSession;
    private javax.swing.JButton JButtonNewFriendship;
    private javax.swing.JLabel JLabelName;
    private javax.swing.JLabel JLabelState;
    private javax.swing.JLabel JLastPosts;
    private javax.swing.JTable JTableComments;
    private javax.swing.JTable JTableFriends;
    private javax.swing.JButton JbuttonAcept;
    private javax.swing.JButton buttonChangeState;
    private javax.swing.JButton buttonComment;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton buttonLike;
    private javax.swing.JButton buttonPost;
    private javax.swing.JButton buttonShowPosts;
    private javax.swing.JButton jButtonBiography;
    private javax.swing.JButton jButtonDecline;
    private javax.swing.JButton jButtonDeleteMessage;
    private javax.swing.JButton jButtonReadMessage;
    private javax.swing.JButton jButtonReturnBiography;
    private javax.swing.JButton jButtonSendPrivateMessage;
    private javax.swing.JButton jButtonSendPrivateMessage2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JTable jTableMessages;
    private javax.swing.JTable jTablePosts;
    private javax.swing.JList<String> jlistFriendshipRequest;
    // End of variables declaration//GEN-END:variables
}
